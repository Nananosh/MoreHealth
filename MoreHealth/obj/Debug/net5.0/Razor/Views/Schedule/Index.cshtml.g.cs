#pragma checksum "C:\Users\nanan\RiderProjects\MoreHealth\MoreHealth\Views\Schedule\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "197d9b00e041ecbbda458bbc49ee51fc93e43a24"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Schedule_Index), @"mvc.1.0.view", @"/Views/Schedule/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\nanan\RiderProjects\MoreHealth\MoreHealth\Views\_ViewImports.cshtml"
using MoreHealth;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\nanan\RiderProjects\MoreHealth\MoreHealth\Views\_ViewImports.cshtml"
using MoreHealth.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"197d9b00e041ecbbda458bbc49ee51fc93e43a24", @"/Views/Schedule/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a3f4ac2e0e60d98d84c9441b1741d07565121ecb", @"/Views/_ViewImports.cshtml")]
    public class Views_Schedule_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<button id=""create"" class=""k-button"">Create Task</button>
<div id=""ticketPlan""></div>

<div id=""aaaa"">Никита пидр</div>
<script>
var date = ""FREQ=WEEKLY;BYDAY=TU,TH""
    $(function () {
        $(""#ticketPlan"").kendoScheduler({
            date: new Date(""2021/12/05""),
            startTime: new Date(""2021/12/05 07:00 AM""),
            height: 600,
            views: [
                ""day"",
                { type: ""workWeek"", selected: true },
                ""week"",
                ""month"",
                ""agenda""
            ],
            timezone: ""Europe/Minsk"",
           
            dataSource: {
                batch: true,
                transport: {
                    read: {
                        url: ""/Appointment/GetAllTalons"",
                        dataType: ""json""
                    }
                },
                schema: {
                    model: {
                        id: ""taskId"", // (Mandatory) The ""id"" of the event is the ""taskId"" field.
");
            WriteLiteral(@"                        fields: {
                            // Describe the Scheduler event fields and map them to the fields returned by the remote service.
                            taskId: {
                                from: ""Id"", // The 'TaskID' server-side field is mapped to the 'taskId' client-side field.
                                type: ""number""
                            },
                            title: {
                                from: ""patient.surname"", // The 'Title' server-side field is mapped to the 'title' client-side field.
                                defaultValue: ""No title"",
                                validation: { required: true }
                            },
                            start: {
                                type: ""date"",
                                from: ""dateStart"" // The 'Start' server-side field is mapped to the 'start' client-side field.
                            },
                            end: {
          ");
            WriteLiteral(@"                      type: ""date"",
                                from: ""dateEnd"" // The 'End' server-side field is mapped to the 'end' client-side field.
                            },
                            description: {
                                from: ""address""
                            },
                            recurrenceRule: {from : ""recurrenceRule""}
                        }
                    }
                }
            }
        });

        $(""#create"").click(function () {
            $(""#ticketPlan"").data(""kendoScheduler"").addEvent({
                start: new Date(""2013/6/13""),
                end: new Date(""2013/6/13"")
            });
        });
    });
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
